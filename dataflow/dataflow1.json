{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "GetFromBlob",
						"type": "DatasetReference"
					},
					"name": "TitleBasics"
				},
				{
					"dataset": {
						"referenceName": "GetFromBlob",
						"type": "DatasetReference"
					},
					"name": "TitleRatings"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "SaveParquet"
				}
			],
			"transformations": [
				{
					"name": "GetOnlyMovies"
				},
				{
					"name": "DropUnusedColumns"
				},
				{
					"name": "GetPopularMovies"
				},
				{
					"name": "JoinOnTconst"
				},
				{
					"name": "DropTconst"
				},
				{
					"name": "SortDescAvrRating"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "Get100Titles"
				},
				{
					"name": "DropRankColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          tconst as string,",
				"          titleType as string,",
				"          primaryTitle as string,",
				"          originalTitle as string,",
				"          isAdult as boolean,",
				"          startYear as integer,",
				"          endYear as string,",
				"          runtimeMinutes as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['title.basics.tsv.gz']) ~> TitleBasics",
				"source(output(",
				"          tconst as string,",
				"          averageRating as double,",
				"          numVotes as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['title.ratings.tsv.gz']) ~> TitleRatings",
				"TitleBasics filter(titleType== \"movie\") ~> GetOnlyMovies",
				"GetOnlyMovies select(mapColumn(",
				"          tconst,",
				"          primaryTitle,",
				"          startYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnusedColumns",
				"TitleRatings filter(numVotes>100000) ~> GetPopularMovies",
				"DropUnusedColumns, GetPopularMovies join(Drop unuesed columns@tconst == TitleRatings@tconst,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinOnTconst",
				"JoinOnTconst select(mapColumn(",
				"          primaryTitle,",
				"          startYear,",
				"          tconst = TitleRatings@tconst,",
				"          averageRating,",
				"          numVotes",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropTconst",
				"DropTconst sort(desc(averageRating, true)) ~> SortDescAvrRating",
				"SortDescAvrRating keyGenerate(output(rank1 as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 filter(rank1<=100) ~> Get100Titles",
				"Get100Titles select(mapColumn(",
				"          primaryTitle,",
				"          startYear,",
				"          tconst,",
				"          averageRating,",
				"          numVotes",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropRankColumn",
				"DropRankColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['Top100'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SaveParquet"
			]
		}
	}
}