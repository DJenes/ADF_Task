{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TitleBasics",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "TitleRatings",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "sort1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "filter3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          tconst as string,",
				"          titleType as string,",
				"          primaryTitle as string,",
				"          originalTitle as string,",
				"          isAdult as string,",
				"          startYear as string,",
				"          endYear as string,",
				"          runtimeMinutes as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          tconst as string,",
				"          averageRating as float,",
				"          numVotes as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 filter(titleType== \"movie\") ~> filter1",
				"filter1 select(mapColumn(",
				"          tconst,",
				"          primaryTitle,",
				"          startYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 filter(numVotes>100000) ~> filter2",
				"select1, filter2 join(select1@tconst == source2@tconst,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          primaryTitle,",
				"          startYear,",
				"          tconst = source2@tconst,",
				"          averageRating,",
				"          numVotes",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sort(desc(averageRating, true)) ~> sort1",
				"sort1 keyGenerate(output(rank1 as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 filter(rank1<=100) ~> filter3",
				"filter3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}